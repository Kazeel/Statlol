if(id.loop != 0 ){
loop.list <- lol.matchslist.r(id.loop, serveur, key)[[1]]
listes_matchs <- rbind(listes_matchs, loop.list)
nplayer <- nplayer +1
}
}
nplayer
table.list <- table(listes_matchs$gameId)
table.list %in% nplayer
table.list <- table(listes_matchs$gameId)[table.list %in% nplayer]
table.list
team.games <- unique(listes_matchs[,c(1,2,5,6)])
team.games$gameId %in% names(table.list)
team.games <- team.games[team.games$gameId %in% names(table.list),]
write.csv(team.games, file = "liste_game_team.csv") #Enregistrement
vec.id_games <- team.games$gameId
loop.tab <- data.frame()
json.tab <- NULL
stat.tab <- NULL
stats.stat.tab <- NULL
participants.tab <- NULL
player.partcipants.tab <- NULL
loop.merge <- NULL
loop.tab<- NULL
for(i in 1:length(vec.id_games)){
id.loop <- vec.id_games[i]
if(id.loop != 0 ){
json.tab <- lol.matches(id.loop, serveur, key)
if(json.tab$gameDuration >= 300){
stat.tab <- json.tab[[12]]
stats.stat.tab <- stat.tab$stats
stat.tab <- cbind(stat.tab[,c("participantId", "teamId")],stats.stat.tab)
names(stat.tab)[1]<- "partcipantId"
participants.tab <- json.tab[["participantIdentities"]]
player.partcipants.tab <-participants.tab$player
participants.tab <- cbind(participants.tab[,1], player.partcipants.tab)
names(participants.tab)[1]<- names(stat.tab)[1]
loop.merge <- merge(stat.tab, participants.tab)
duration <- rep(json.tab$gameDuration, 10)
loop.merge<- cbind(loop.merge, duration)
if((i!=1)&(length(names(loop.merge))!=length(names(loop.tab)))){
firstInhibitorAssist <- rep(NA, nrow(loop.merge))
firstInhibitorKill <- rep(NA, nrow(loop.merge))
loop.merge <- cbind(loop.merge, firstInhibitorKill)
names(loop.merge)[85]<- "firstInhibitorKill"
loop.merge <- cbind(loop.merge, firstInhibitorAssist)
names(loop.merge)[86]<- "firstInhibitorAssist"
}
row.names(loop.merge) <- paste(id.loop, c(0:9), sep = "")
loop.tab<- rbind(loop.tab,loop.merge)
if(i%%8 == 0){
Sys.sleep(10) #Tant qu'on a pas une clef normale
}
}
}
}
vec.joueurs <- c("TOP"= pseudo_top, "JUN"= pseudo_jun, "MID"=pseudo_mid, "ADC"=pseudo_adc,"SUP"=pseudo_sup)
result.id<-  lol.player(pseudo, serveur, key)
account.id<-result.id[[2]] #Get ID
result.matchslist <- lol.matchslist.r(account.id, serveur, key)
matchs.list <- result.matchslist[[1]]
matchs.id.test <- matchs.list[1,2]
result.matches <- lol.matches(matchs.id.test, serveur, key)
teams.data.test <- result.matches[[11]]
participants.data.test <- result.matches[[12]]
participants.id.data.test <- result.matches[["participantIdentities"]]
test.merge <- merge(participants.data.test, participants.id.data.test)#RechercheV
team.ids <- team.players(vec.joueurs,serveur,key)
team.matchs.list <- team.matchslist(vec.joueurs, team.ids, serveur, key)
team.matchs.stats <- team.matchsstats(team.matchs.list, serveur, key)
#############################
#Programme type
###########################
#
#
#
#
###########################
# Données utilisateurs
##########################
#
#
#
############################
pseudo <- "Kazeel"
serveur <- "euw1"
saison <- 2016
key    <- "RGAPI-e207fef8-d466-4103-9bf6-00c0ea48e0fe"
pseudo_top <- "RKSReidoz"
pseudo_jun <- "Kazeel"
pseudo_mid <- "Mashu"
pseudo_adc <- "RedWhale"
pseudo_sup <- ""
##########################
# Fonctions
#########################
#
#
#############################
setwd("C:/Documents/GitHub/Statlol")      # Attention, ce chemin n'est pas relatif
source("fonctions_lol.R", local = TRUE)
source("fonctions_team.R", local = TRUE)
require(jsonlite)
require(curl)
require(httr)
require(TriMatch)
#####################################
#Algrotihme
####################################
#
#
#####################################
vec.joueurs <- c("TOP"= pseudo_top, "JUN"= pseudo_jun, "MID"=pseudo_mid, "ADC"=pseudo_adc,"SUP"=pseudo_sup)
#Test lol.player
result.id<-  lol.player(pseudo, serveur, key)
account.id<-result.id[[2]] #Get ID
#Test lol.matchslist.r
result.matchslist <- lol.matchslist.r(account.id, serveur, key)
matchs.list <- result.matchslist[[1]]
matchs.id.test <- matchs.list[1,2]
#Test lol.matches
result.matches <- lol.matches(matchs.id.test, serveur, key)
teams.data.test <- result.matches[[11]]
participants.data.test <- result.matches[[12]]
participants.id.data.test <- result.matches[["participantIdentities"]]
test.merge <- merge(participants.data.test, participants.id.data.test)#RechercheV
#Test team.player
team.ids <- team.players(vec.joueurs,serveur,key)
#Test team.matchslist
team.matchs.list <- team.matchslist(vec.joueurs, team.ids, serveur, key)
#Test team.matchsstats
team.matchs.stats <- team.matchsstats(team.matchs.list, serveur, key)
#############################################################################
#Functions TEAM
#############################################################################
# You need this packages :
# library(jsonlite)
# library(curl)
# library(httr)
############################################################################
# Functions using fonctions_lol.R
#############################################################################
#
#
#
######################################################
#team.players
######################################################
# get summoners account ids of a team of 5 players
# Return a data frame with Name and id
# see Riot Api for more information
# vec.players : vector of summoners name
# serveur : region
# key : a Riot Api key
########################################################
team.players <- function(vec.players, serveur, key){
# vec.players : vector of summoners name
# Init
len <- length(vec.players)
players.ids <- c()
for(i in 1:len){
# Return 0 if a player is missing
if(vec.players[i] != "" ){
players.ids[i]<-lol.player(pseudo = vec.players[i], serveur = serveur, key = key)[["accountId"]]
} else{
players.ids[i] <- 0
}
}
return(players.ids)
}
#######################################################
# team.matchslist
#####################################################
# get ranked matchslist of team
# see Riot Api for more information
# vec.players : vector of summonerName
# players.id : vector of summoner account id
# serveur : region
# key : a Riot Api key
########################################################
team.matchslist <- function(vec.players, players.id, serveur, key){
#
# Init
len <- length(vec.players)
data.matchs <- data.frame()
nplayer <- 0
# Algo
for(i in 1:len){
# Si l'Id est 0 alors vous n'avez pas rentré un pseudo
id.loop <- players.id[i]
pseudo.loop <- vec.players[i]
if(id.loop != 0 ){
loop.list <- lol.matchslist.r(id.loop, serveur, key)[[1]]
listes_matchs <- rbind(listes_matchs, loop.list)
nplayer <- nplayer +1
}
}
table.list <- table(listes_matchs$gameId)[table.list %in% nplayer]
team.games <- unique(listes_matchs[,c(1,2,5,6)])
team.games <- team.games[team.games$gameId %in% names(table.list),]
return(team.games)
}
#######################################################
# team.matchsstats
#####################################################
# get all the stat of a list of games (for all players)
# see Riot Api for more information
# data.matchs.team : data.frame of a game id list (see team matchslist)
# serveur : region
# key : a Riot Api key
########################################################
team.matchsstats <- function(data.matchs.team, serveur, key){
# Init
vec.games.ids <- data.matchs.team$gameId
loop.tab <- data.frame()
json.tab <- NULL
stat.tab <- NULL
stats.stat.tab <- NULL
participants.tab <- NULL
player.partcipants.tab <- NULL
loop.merge <- NULL
loop.tab<- NULL
for(i in 1:length(vec.games.ids)){
id.loop <- vec.games.ids[i]
if(id.loop != 0 ){
json.tab <- lol.matches(id.loop, serveur, key)
if(json.tab$gameDuration >= 300){
stat.tab <- json.tab[[12]]
stats.stat.tab <- stat.tab$stats
stat.tab <- cbind(stat.tab[,c("participantId", "teamId")],stats.stat.tab)
names(stat.tab)[1]<- "partcipantId"
participants.tab <- json.tab[["participantIdentities"]]
player.partcipants.tab <-participants.tab$player
participants.tab <- cbind(participants.tab[,1], player.partcipants.tab)
names(participants.tab)[1]<- names(stat.tab)[1]
loop.merge <- merge(stat.tab, participants.tab)
duration <- rep(json.tab$gameDuration, 10)
loop.merge<- cbind(loop.merge, duration)
if((i!=1)&(length(names(loop.merge))!=length(names(loop.tab)))){
firstInhibitorAssist <- rep(NA, nrow(loop.merge))
firstInhibitorKill <- rep(NA, nrow(loop.merge))
loop.merge <- cbind(loop.merge, firstInhibitorKill)
names(loop.merge)[85]<- "firstInhibitorKill"
loop.merge <- cbind(loop.merge, firstInhibitorAssist)
names(loop.merge)[86]<- "firstInhibitorAssist"
}
row.names(loop.merge) <- paste(id.loop, c(0:9), sep = "")
loop.tab<- rbind(loop.tab,loop.merge)
if(i%%8 == 0){
Sys.sleep(10) #Tant qu'on a pas une clef normale
}
}
}
}
return(loop.tab)
}
#############################################################
team.ids <- team.players(vec.joueurs,serveur,key)
team.ids
team.matchs.list <- team.matchslist(vec.joueurs, team.ids, serveur, key)
team.matchs.list
listes_matchs <- data.frame()
nplayer <- 0
for(i in 1:5){
# Si l'Id est 0 alors vous n'avez pas rentré un pseudo
id.loop <- data.pseudo_id[i,"ids_joueurs"]
pseudo.loop <- data.pseudo_id[i,"pseudos_joueurs"]
if(id.loop != 0 ){
loop.list <- lol.matchslist.r(id.loop, serveur, key)[[1]]
listes_matchs <- rbind(listes_matchs, loop.list)
nplayer <- nplayer +1
}
}
table.list <- table(listes_matchs$gameId)[table.list %in% nplayer]
team.games <- unique(listes_matchs[,c(1,2,5,6)])
team.games <- team.games[team.games$gameId %in% names(table.list),]
table.list
table.list <- table(listes_matchs$gameId)
table.list
table.list <- table.list[table.list %in% nplayer]
listes_matchs <- data.frame()
nplayer <- 0
for(i in 1:5){
# Si l'Id est 0 alors vous n'avez pas rentré un pseudo
id.loop <- data.pseudo_id[i,"ids_joueurs"]
pseudo.loop <- data.pseudo_id[i,"pseudos_joueurs"]
if(id.loop != 0 ){
loop.list <- lol.matchslist.r(id.loop, serveur, key)[[1]]
listes_matchs <- rbind(listes_matchs, loop.list)
nplayer <- nplayer +1
}
}
table.list <- table(listes_matchs$gameId)
table.list <- table.list[table.list %in% nplayer]
team.games <- unique(listes_matchs[,c(1,2,5,6)])
team.games <- team.games[team.games$gameId %in% names(table.list),]
#############################
#Programme type
###########################
#
#
#
#
###########################
# Données utilisateurs
##########################
#
#
#
############################
pseudo <- "Kazeel"
serveur <- "euw1"
saison <- 2016
key    <- "RGAPI-e207fef8-d466-4103-9bf6-00c0ea48e0fe"
pseudo_top <- "RKSReidoz"
pseudo_jun <- "Kazeel"
pseudo_mid <- "Mashu"
pseudo_adc <- "RedWhale"
pseudo_sup <- ""
##########################
# Fonctions
#########################
#
#
#############################
setwd("C:/Documents/GitHub/Statlol")      # Attention, ce chemin n'est pas relatif
source("fonctions_lol.R", local = TRUE)
source("fonctions_team.R", local = TRUE)
require(jsonlite)
require(curl)
require(httr)
require(TriMatch)
#####################################
#Algrotihme
####################################
#
#
#####################################
vec.joueurs <- c("TOP"= pseudo_top, "JUN"= pseudo_jun, "MID"=pseudo_mid, "ADC"=pseudo_adc,"SUP"=pseudo_sup)
#Test lol.player
result.id<-  lol.player(pseudo, serveur, key)
account.id<-result.id[[2]] #Get ID
#Test lol.matchslist.r
result.matchslist <- lol.matchslist.r(account.id, serveur, key)
matchs.list <- result.matchslist[[1]]
matchs.id.test <- matchs.list[1,2]
#Test lol.matches
result.matches <- lol.matches(matchs.id.test, serveur, key)
teams.data.test <- result.matches[[11]]
participants.data.test <- result.matches[[12]]
participants.id.data.test <- result.matches[["participantIdentities"]]
test.merge <- merge(participants.data.test, participants.id.data.test)#RechercheV
#Test team.player
team.ids <- team.players(vec.joueurs,serveur,key)
#Test team.matchslist
team.matchs.list <- team.matchslist(vec.joueurs, team.ids, serveur, key)
#Test team.matchsstats
team.matchs.stats <- team.matchsstats(team.matchs.list, serveur, key)
View(team.matchs.list)
team.ids <- team.players(vec.joueurs,serveur,key)
team.matchs.list <- team.matchslist(vec.joueurs, team.ids, serveur, key)
source("fonctions_lol.R", local = TRUE)
source("fonctions_team.R", local = TRUE)
team.ids <- team.players(vec.joueurs,serveur,key)
team.matchs.list <- team.matchslist(vec.joueurs, team.ids, serveur, key)
team.matchs.stats <- team.matchsstats(team.matchs.list, serveur, key)
View(team.matchs.stats)
team.ids
paste(team.ids)
paste(team.ids, sep = "")
paste(team.ids, collapse = " ")
dir.create(paste(team.ids, collapse = " ")) # Create a specific folder for a team
team.folder <- paste(team.ids, collapse = " ")
dir.create(team.folder) # Create a specific folder for a team
team.folder <- paste(team.ids, collapse = "_")
dir.create(team.folder) # Create a specific folder for a team
dir.create(paste("./team_data",team.folder, sep = "")) # Create a specific folder for a team
dir.create("team_data")
team.ids <- team.players(vec.joueurs,serveur,key)
team.folder <- paste(team.ids, collapse = "_")
dir.create(paste("./team_data/",team.folder, sep = "")) # Create a specific folder for a team
team.matchs.list <- team.matchslist(vec.joueurs, team.ids, serveur, key)
team.ids <- team.players(vec.joueurs,serveur,key)
team.folder <- paste("./team_data/",paste(team.ids, collapse = "_"), sep = "")
dir.create(team.folder) # Create a specific folder for a team
write.csv(team.ids, file = paste(team.folder,"ids_joueurs.csv",sep = "")) #Enregistrement
write.csv(team.ids, file = paste(team.folder,"/ids_joueurs.csv",sep = "")) #Enregistrement
write.csv(team.matchs.list, file = paste(team.folder,"/matchs_list.csv",sep = "")) #Enregistrement
write.csv(team.matchs.stats, file = paste(team.folder,"/matchs_stats.csv",sep = "")) #Enregistrement
library("googlesheets")
require("googlesheets")
install.packages("googlesheets")
suppressPackageStartupMessages(library("dplyr"))
gs_gap() %>%
gs_copy(to = "Gapminder")
require("googlesheets")
gs_gap() %>%
gs_copy(to = "Gapminder")
gs_gap() %>% gs_copy(to = "Gapminder") # Data test
#############################################################################
#Functions LOL
#############################################################################
# You need this packages :
# library(jsonlite)
# library(curl)
# library(httr)
############################################################################
# Functions using Riot APi
#############################################################################
# lol.player : get summoner info with a summonername
# lol.matchslist.r : get ranked game list of a player with a account id
# lol.matches : get game info with game id
######################################################
#lol.player
######################################################
# get summoner info with a summonername
# see Riot Api for more information
# pseudo : summonername of a player (no space)
# serveur : region
# key : a Riot Api key
########################################################
lol.player <- function(pseudo, serveur, key){
fichier.json<-paste("https://",serveur,".api.riotgames.com/lol/summoner/v3/summoners/by-name/",pseudo,"?api_key=",key,sep="")
liste<- fromJSON(fichier.json)
return(liste)
}
#######################################################
# lol.matchslist.r
#####################################################
# get ranked matchslist of a player
# see Riot Api for more information
# account.id : account id of a player
# serveur : region
# key : a Riot Api key
########################################################
lol.matchslist.r <- function(account.id, serveur, key){
fichier.json<-paste("https://",serveur,".api.riotgames.com/lol/match/v3/matchlists/by-account/",account.id,"?queue=440&api_key=",key,sep="")
liste<- fromJSON(fichier.json)
return(liste)
}
#######################################################
# lol.matches
#####################################################
# get matches info of a game
# see Riot Api for more information
# game.id : game id of a game
# serveur : region
# key : a Riot Api key
########################################################
lol.matches <- function(game.id, serveur, key){
fichier.json<-paste("https://",serveur,".api.riotgames.com/lol/match/v3/matches/",game.id,"?api_key=",key,sep="")
liste<- fromJSON(fichier.json)
return(liste)
}
#############################################################
#############################
#Programme type
###########################
#
#
#
#
###########################
# Donn?es utilisateurs
##########################
#
#
#
############################
pseudo <- "Kazeel"
serveur <- "euw1"
saison <- 2016
key    <- "RGAPI-e207fef8-d466-4103-9bf6-00c0ea48e0fe"
pseudo_top <- "RKSReidoz"
pseudo_jun <- "Kazeel"
pseudo_mid <- "Mashu"
pseudo_adc <- "RedWhale"
pseudo_sup <- ""
##########################
# Fonctions
#########################
#
#
#############################
setwd("C:/Documents/GitHub/Statlol")      # Attention, ce chemin n'est pas relatif
source("fonctions_lol.R", local = TRUE)
source("fonctions_team.R", local = TRUE)
require(jsonlite)
require(curl)
require(httr)
require(TriMatch)
#####################################
#Algrotihme
####################################
#
#
#####################################
vec.joueurs <- c("TOP"= pseudo_top, "JUN"= pseudo_jun, "MID"=pseudo_mid, "ADC"=pseudo_adc,"SUP"=pseudo_sup)
result.id<-  lol.player(pseudo, serveur, key)
key    <- "RGAPI-93834b4f-b9ab-4f0b-8d78-3a338cecf531"
vec.joueurs <- c("TOP"= pseudo_top, "JUN"= pseudo_jun, "MID"=pseudo_mid, "ADC"=pseudo_adc,"SUP"=pseudo_sup)
result.id<-  lol.player(pseudo, serveur, key)
names(result.id)
result.id["accountId"]
shiny::runApp('lol_team')
runApp('lol_team')
runApp('lol_team')
runApp('lol_team')
runApp('lol_team')
runApp('lol_team')
runApp('lol_team')
runApp('lol_team')
