row.names(loop.merge) <- paste(id.loop, c(0:9), sep = "")
loop.tab<- rbind(loop.tab,loop.merge)
if(i%%8 == 0){
Sys.sleep(10) #Tant qu'on a pas une clef normale
}
}
}
}
return(loop.tab)
}
#######################################################
# team.allstats
#####################################################
# get all the stat of a list of games (for all players)
# see Riot Api for more information
# vec.players : vector of player
# serveur : region
# key : a Riot Api key
########################################################
team.allstats<- function(vec.players, serveur, key){
vec.id <- team.players(vec.players, serveur, key)
data.matchs.team <- team.matchslist(vec.players, vec.id, serveur, key)
data <- team.matchsstats(data.matchs.team, serveur, key)
#rename (maybe a player rename)
for(i in 1:length(vec.id)){
data$summonerName[data$accountId == vec.id[i]]<-vec.players[i]
}
result <- team.cleaner(data, vec.id)
return(result)
}
#######################################################
# team.cleaner
#####################################################
# clean data of a team (keep only a few data)
# data : data frame of a team
########################################################
team.cleaner <- function(data,vec.id){
matchinfo <- data[data[,"accountId"] %in% vec.id,] #Filter : players of the team
clean.column<-data.frame(
#######################################
# player
Id=row.names(matchinfo),
Name=matchinfo$summonerName,
Id_Sum=matchinfo$summonerId,
Id_Ac=matchinfo$accountId,
#######################################
# Stat player
Kill=matchinfo$kills,
Death=matchinfo$deaths,
Assist=matchinfo$assists,
T_Damage_D=matchinfo$totalDamageDealt,
Damage_D=matchinfo$totalDamageDealtToChampions,
Damage_Turret=matchinfo$damageDealtToTurrets,
Turret=matchinfo$turretKills,
Inhib=matchinfo$inhibitorKills,
Heal=matchinfo$totalHeal,
Heal_N=matchinfo$totalUnitsHealed,
Score_Vision=matchinfo$visionScore,
vison_ward=matchinfo$visionWardsBoughtInGame,
ward=matchinfo$wardsPlaced,
Damage_T=matchinfo$totalDamageTaken,
CC_score=matchinfo$timeCCingOthers,
CC_time=matchinfo$totalTimeCrowdControlDealt,
Gold_E=matchinfo$goldEarned,
Minions=matchinfo$totalMinionsKilled,
Minionsbis=matchinfo$neutralMinionsKilled,
F_Blood=matchinfo$firstBloodKill,
F_Tower=matchinfo$firstTowerKill,
######################################
# team
Blue_Side=matchinfo$teamId,
Win=matchinfo$win,
Duree=matchinfo$duration,
Id_game=substr(row.names(matchinfo),1,10))
############################################
# Convertion
clean.column$Id_game<-as.factor(clean.column$Id_game)
clean.column$Blue_Side[clean.column$Blue_Side == 100]<-TRUE
clean.column$Blue_Side[clean.column$Blue_Side == 200]<-FALSE
return(clean.column)
}
#######################################################
# team.summary
#######################################################
# Give some (calculate) stat of the team (winrate etc...)
# data : a clean data of a team (use team.cleaner)
#######################################################
team.summary <-function(data,func){
filter.data <- data[,c("Kill",
"Death",
"Assist",
"T_Damage_D",
"Damage_D",
"Damage_Turret",
"Turret",
"Inhib",
"Heal",
"Heal_N",
"Score_Vision",
"vison_ward",
"ward",
"Damage_T",
"CC_score",
"CC_time",
"Gold_E",
"Minions",
"Minionsbis",
"F_Blood",
"F_Tower",
"Blue_Side",
"Win",
"Duree"
)]
result<-aggregate(filter.data,by=list(data$Name), FUN = func)
return(result)
}
#######################################################
# team.normalize
#######################################################
# Give some (calculate) stat of the team (winrate etc...)
# data : a clean data of a team (use team.cleaner)
#######################################################
team.normalize <-function(data){
normalize.data <- data[,c("T_Damage_D",
"Damage_D",
"Damage_Turret",
"Heal",
"Score_Vision",
"vison_ward",
"ward",
"Damage_T",
"CC_score",
"CC_time",
"Gold_E",
"Minions",
"Minionsbis")]/data$Duree
result<- cbind(data[,c("Kill",
"Death",
"Assist",
"Turret",
"Inhib",
"Heal_N",
"F_Blood",
"F_Tower",
"Blue_Side",
"Win",
"Duree"
)],normalize.data)
return(result)
}
#######################################################
# team.kda
#######################################################
# Give some (calculate) stat of the team (winrate etc...)
# data : a clean data of a team (use team.cleaner)
#######################################################
team.kda <-function(data,filtre){
data0 <- data[,c("Kill","Death","Assist")]
if(filtre == "win"){
data1 <- data0[data$Win == TRUE,]
name <- data$Name[data$Win == TRUE]
}
if(filtre == "side"){
data1 <- data0[data$Blue_Side == 1,]
name <- data$Name[data$Blue_Side == 1]
}
else{
data1 <- data0
name <- data$Name
}
somme <- aggregate(data1,by=list(name), FUN = sum)
result <- data.frame[KDA = (somme$Kill+somme$Assist)/somme$Death,
Player = somme$Group.1]
return(result)
}
KDA <- team.kda(data,"win")
KDA
KDA
KDA <- team.kda(data,"win")
KDA <- team.kda(data = data,filtre = "win")
somme <- aggregate(data1,by=list(name), FUN = sum)
data0 <- data[,c("Kill","Death","Assist")]
data1 <- data0
name <- data$Name
somme <- aggregate(data1,by=list(name), FUN = sum)
somme
result <- data.frame[KDA = (somme$Kill+somme$Assist)/somme$Death,
Player = somme$Group.1]
somme$Kill+somme$Assist
(somme$Kill+somme$Assist)/somme$Death
data.frame[KDA = (somme$Kill+somme$Assist)/somme$Death,
Player = somme$Group.1]
(somme$Kill+somme$Assist)/somme$Death
somme$Group.1
kda <- (somme$Kill+somme$Assist)/somme$Death
data.frame[KDA = kda,
Player = somme$Group.1]
cbind(kda, somme$Group.1)
result <- cbind(kda, somme$Group.1)
View(result)
shiny::runApp()
View(data)
aggregate(data$Win,by=list(data$Blue_Side), FUN = mean)
mean(data$Win)
sum(data$win)
sum(data$Win)
32/60
32/5/60/5
32/5
60/5
60/56.4/12
6.4/12
Blue_Side <- data$Blue_Side
Blue_Side
Blue_Side[Blue_Side == 1] <- "Blue"
Blue_Side
list(Blue_Side)
aggregate(data$Win,by=list(Blue_Side), FUN = mean)
Blue_Side[Blue_Side == 0] <- "Red"
aggregate(data$Win,by=list(Blue_Side), FUN = mean)
mean(data$Win)
team.winrate <-function(data,filtre){
data0 <- data[,c("Kill","Death","Assist")]
if(filtre == "side"){
Blue_Side <- data$Blue_Side
Blue_Side[Blue_Side == 1] <- "Blue"
Blue_Side[Blue_Side == 0] <- "Red"
somme <- aggregate(data$Win,by=list(Blue_Side), FUN = mean)
}
else{
somme <- mean(data$Win)
}
retu
team.winrate <-function(data,filtre){
data0 <- data[,c("Kill","Death","Assist")]
if(filtre == "side"){
Blue_Side <- data$Blue_Side
Blue_Side[Blue_Side == 1] <- "Blue"
Blue_Side[Blue_Side == 0] <- "Red"
somme <- aggregate(data$Win,by=list(Blue_Side), FUN = mean)
}
else{
somme <- mean(data$Win)
}
return(somme)
}
team.winrate <-function(data,filtre){
data0 <- data[,c("Kill","Death","Assist")]
if(filtre == "side"){
Blue_Side <- data$Blue_Side
Blue_Side[Blue_Side == 1] <- "Blue"
Blue_Side[Blue_Side == 0] <- "Red"
somme <- aggregate(data$Win,by=list(Blue_Side), FUN = mean)
}
if(missing(filtre){
somme <- mean(data$Win)
}
return(somme)
}
team.winrate <-function(data,filtre){
data0 <- data[,c("Kill","Death","Assist")]
if(filtre == "side"){
Blue_Side <- data$Blue_Side
Blue_Side[Blue_Side == 1] <- "Blue"
Blue_Side[Blue_Side == 0] <- "Red"
somme <- aggregate(data$Win,by=list(Blue_Side), FUN = mean)
}
if(missing(filtre)){
somme <- mean(data$Win)
}
return(somme)
}
Column <- gvisPieChart(team.winrate(data))
team.winrate <-function(data,filtre="none"){
data0 <- data[,c("Kill","Death","Assist")]
if(filtre == "side"){
Blue_Side <- data$Blue_Side
Blue_Side[Blue_Side == 1] <- "Blue"
Blue_Side[Blue_Side == 0] <- "Red"
somme <- aggregate(data$Win,by=list(Blue_Side), FUN = mean)
}
else{
somme <- mean(data$Win)
}
return(somme)
}
Column <- gvisPieChart(team.winrate(data))
mean(data$Win)
team.winrate <-function(data,filtre="none"){
data0 <- data[,c("Kill","Death","Assist")]
if(filtre == "side"){
Blue_Side <- data$Blue_Side
Blue_Side[Blue_Side == 1] <- "Blue"
Blue_Side[Blue_Side == 0] <- "Red"
resultat <- aggregate(data$Win,by=list(Blue_Side), FUN = mean)
}
else{
winrate <- mean(data$Win)
vector <- c(winrate, 1-winrate)
resultat <- cbind(c("Win","Loose"),vector)
}
return(resultat)
}
team.winrate(data)
team.winrate <-function(data,filtre="none"){
data0 <- data[,c("Kill","Death","Assist")]
if(filtre == "side"){
Blue_Side <- data$Blue_Side
Blue_Side[Blue_Side == 1] <- "Blue"
Blue_Side[Blue_Side == 0] <- "Red"
resultat <- aggregate(data$Win,by=list(Blue_Side), FUN = mean)
}
else{
winrate <- mean(data$Win)
vector <- c(winrate, 1-winrate)
resultat <- data.frame(Win = c("Win","Loose"), Winrate = vector)
}
return(resultat)
}
team.winrate(data)
gvisPieChart(data = team.winrate(data), labelvar = "Win", numvar = "Winrate")
Column <- gvisPieChart(data = team.winrate(data), labelvar = "Win", numvar = "Winrate")
plot(Column)
Column <- gvisPieChart(data = team.winrate(data),
labelvar = "Win",
numvar = "Winrate",
options = list(colors="['#034500','#540002']"))
plot(Column)
Column <- gvisPieChart(data = team.winrate(data),
labelvar = "Win",
numvar = "Winrate",
options = list(colors="['#156711','#540002']"))
plot(Column)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
aggregate(data$Win,by=list(Blue_Side), FUN = mean)
winrate <- aggregate(data$Win,by=list(Blue_Side), FUN = mean)
resultat <- data.frame(Side = winrate$Group.1,
Win = winrate$x,
Loose = 1-winrate$x)
resultat
team.winrate <-function(data,filtre="none"){
data0 <- data[,c("Kill","Death","Assist")]
if(filtre == "side"){
Blue_Side <- data$Blue_Side
Blue_Side[Blue_Side == 1] <- "Blue"
Blue_Side[Blue_Side == 0] <- "Red"
winrate <- aggregate(data$Win,by=list(Blue_Side), FUN = mean)
resultat <- data.frame(Side = winrate$Group.1,
Win = winrate$x)
}
else{
winrate <- mean(data$Win)
vector <- c(winrate, 1-winrate)
resultat <- data.frame(Win = c("Win","Loose"), Winrate = vector)
}
return(resultat)
}
Blue_Side <- data$Blue_Side
Blue_Side[Blue_Side == 1] <- "Blue"
Blue_Side[Blue_Side == 0] <- "Red"
winrate <- aggregate(data$Win,by=list(Blue_Side), FUN = mean)
resultat <- data.frame(Side = winrate$Group.1,
Win = winrate$x)
resultat
View(data)
sum(data$Blue_Side)
0.4/3
0.6*2/3
sum(data$Win)
28/3
sum(data$Win[data$Blue_Side == 1])
sum(data$Win[data$Blue_Side == 0])
8/20
24/40
Blue_Side <- data$Blue_Side
Blue_Side[Blue_Side == 1] <- "Blue"
Blue_Side[Blue_Side == 0] <- "Red"
winrate <- aggregate(data$Win,by=list(Blue_Side), FUN = mean)
resultat <- data.frame(Side = winrate$Group.1,
Win = winrate$x,
Loose = 1-winrate$x)
resultat
resultat
t(resultat)
winrate
t(winrate)
1*"0.4"
as.numeric("0.4")
Blue_Side <- data$Blue_Side
Blue_Side[Blue_Side == 1] <- "Blue"
Blue_Side[Blue_Side == 0] <- "Red"
winrate <- t(aggregate(data$Win,by=list(Blue_Side), FUN = mean))
resultat <- data.frame(Win = c("Win","Loose"),
winrate[1,1] = c(as.numeric(winrate[2,1]),1-as.numeric(winrate[2,1])),
winrate[1,2] = c(as.numeric(winrate[2,2]),1-as.numeric(winrate[2,2])))
Blue_Side <- data$Blue_Side
Blue_Side[Blue_Side == 1] <- "Blue"
Blue_Side[Blue_Side == 0] <- "Red"
winrate <- t(aggregate(data$Win,by=list(Blue_Side), FUN = mean))
resultat <- data.frame(c("Win","Loose"),
c(as.numeric(winrate[2,1]),1-as.numeric(winrate[2,1])),
c(as.numeric(winrate[2,2]),1-as.numeric(winrate[2,2])))
resultat
winrate
Blue_Side <- data$Blue_Side
Blue_Side[Blue_Side == 1] <- "Blue"
Blue_Side[Blue_Side == 0] <- "Red"
winrate <- t(aggregate(data$Win,by=list(Blue_Side), FUN = mean))
resultat <- data.frame(c(c("Win","Loose"),
c(as.numeric(winrate[2,1]),1-as.numeric(winrate[2,1])),
c(as.numeric(winrate[2,2]),1-as.numeric(winrate[2,2]))))
resultat
Blue_Side <- data$Blue_Side
Blue_Side[Blue_Side == 1] <- "Blue"
Blue_Side[Blue_Side == 0] <- "Red"
winrate <- t(aggregate(data$Win,by=list(Blue_Side), FUN = mean))
resultat <- data.frame(Win = c("Win","Loose"),
Col1 = c(as.numeric(winrate[2,1]),1-as.numeric(winrate[2,1])),
Col2 = c(as.numeric(winrate[2,2]),1-as.numeric(winrate[2,2])))
resultat
names(resultat)
c("Win", winrate[1,1], winrate[2,1])
c("Win", winrate[1,1], winrate[1,2])
names(resultat) <- c("Win", winrate[1,1], winrate[1,2])
resultat
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
(data$Minions+data$Minionsbis)/data$Duree
60*(data$Minions+data$Minionsbis)/data$Duree
farm.min <- 60*(data$Minions+data$Minionsbis)/data$Duree
aggregate(farm.min,by=data$Name)
aggregate(farm.min,by=data$Name, FUN = mean)
aggregate(farm.min,by=list(data$Name), FUN = mean)
Column <- gvisColumnChart(resultat)
plot(Column)
resultat<-aggregate(farm.min,by=list(data$Name), FUN = mean)
Column <- gvisColumnChart(resultat)
plot(Column)
names(resultat)<- c("Players","Minions/min")
resultat
Column <- gvisColumnChart(resultat)
plot(Column)
Win <- data$Win
aggregate(farm.min,by=list(data$Name,Win), FUN = mean)
Win <- data$Win
Win[Win == 1] <- "Win"
Win[Win == 0] <- "Loose"
farm.min <- 60*(data$Minions+data$Minionsbis)/data$Duree
resultat<-aggregate(farm.min,by=list(data$Name,Win), FUN = mean)
resultat
Win <- data$Win
Win[Win == TRUE] <- "Win"
Win[Win == FALSE] <- "Loose"
farm.min <- 60*(data$Minions+data$Minionsbis)/data$Duree
resultat<-aggregate(farm.min,by=list(data$Name,Win), FUN = mean)
resultat
Win <- data$Win
farm.min <- 60*(data$Minions+data$Minionsbis)/data$Duree
resultat<-aggregate(farm.min,by=list(data$Name,Win), FUN = mean)
resultat
farm.side<-aggregate(farm.min,by=list(data$Name,Win), FUN = mean)
farm.side[,farm.side$Group.2==TRUE]
farm.side[farm.side$Group.2==TRUE]
farm.side[,"Group.2"==TRUE]
farm.side[,farm.side$Group.2==TRUE]
farm.side$Group.2
farm.side$Group.2==TRUE
farm.side[farm.side$Group.2==TRUE,]
farm.side[farm.side$Group.2==TRUE,c("Group.1","x")]
merge(farm.side[farm.side$Group.2==TRUE,c("Group.1","x")],farm.side[farm.side$Group.2==FALSE,c("Group.1","x")])
merge(farm.side[farm.side$Group.2==TRUE,c("Group.1","x")],farm.side[farm.side$Group.2==FALSE,c("Group.1","x")], by="Group.1")
names(resultat) <- c("Players", "Minions/min when Win", "Minions/min when loose")
team.farm <-function(data,filtre="none"){
if(filtre == "side"){
Win <- data$Win
farm.min <- 60*(data$Minions+data$Minionsbis)/data$Duree
farm.side<-aggregate(farm.min,by=list(data$Name,Win), FUN = mean)
resultat<-merge(farm.side[farm.side$Group.2==TRUE,c("Group.1","x")],farm.side[farm.side$Group.2==FALSE,c("Group.1","x")], by="Group.1")
names(resultat) <- c("Players", "Minions/min when Win", "Minions/min when loose")
}
else{
farm.min <- 60*(data$Minions+data$Minionsbis)/data$Duree
resultat<-aggregate(farm.min,by=list(data$Name), FUN = mean)
names(resultat)<- c("Players","Minions/min")
}
return(resultat)
}
farm.min <- 60*(data$Minions+data$Minionsbis)/data$Duree
resultat<-aggregate(farm.min,by=list(data$Name), FUN = mean)
names(resultat)<- c("Players","Minions/min")
Win <- data$Win
farm.min <- 60*(data$Minions+data$Minionsbis)/data$Duree
farm.side<-aggregate(farm.min,by=list(data$Name,Win), FUN = mean)
resultat<-merge(farm.side[farm.side$Group.2==TRUE,c("Group.1","x")],farm.side[farm.side$Group.2==FALSE,c("Group.1","x")], by="Group.1")
names(resultat) <- c("Players", "Minions/min when Win", "Minions/min when loose")
Column <- gvisColumnChart(resultat)
plot(Column)
resultat
runApp()
runApp()
