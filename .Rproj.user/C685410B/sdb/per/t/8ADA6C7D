{
    "collab_server" : "",
    "contents" : "#############################################################################\n#Functions TEAM\n#############################################################################\n# You need this packages :\n\n# library(jsonlite)\n# library(curl)\n# library(httr)\n############################################################################\n# Functions using fonctions_lol.R \n#############################################################################\n# \n# \n# \n\n######################################################\n#team.players\n######################################################\n# get summoners account ids of a team of 5 players\n# Return a vector with ids\n# see Riot Api for more information\n# vec.players : vector of summoners name\n# serveur : region\n# key : a Riot Api key\n########################################################\n\nteam.players <- function(vec.players, serveur, key){\n  # vec.players : vector of summoners name\n  \n  # Init\n  len <- length(vec.players)\n  players.ids <- c()\n  for(i in 1:len){\n    # Return 0 if a player is missing\n    if(vec.players[i] != \"\" ){\n      players.ids[i]<-lol.player(pseudo = vec.players[i], serveur = serveur, key = key)[[\"accountId\"]]\n    } else{\n      players.ids[i] <- 0\n    }\n  }\n  return(players.ids)\n}\n\n#######################################################\n# team.matchslist\n#####################################################\n# get ranked matchslist of team\n# see Riot Api for more information\n# vec.players : vector of summonerName\n# players.id : vector of summoner account id\n# serveur : region\n# key : a Riot Api key\n########################################################\n\nteam.matchslist <- function(vec.players, players.id, serveur, key){\n  # \n  \n  # Init\n  len <- length(vec.players)\n  listes_matchs <- data.frame()\n  nplayer <- 0\n  for(i in 1:5){\n    # Si l'Id est 0 alors vous n'avez pas rentr? un pseudo\n    id.loop <- players.id[i]\n    pseudo.loop <- vec.players[i]\n    if(id.loop != 0 ){\n      loop.list <- lol.matchslist.r(id.loop, serveur, key)[[1]]\n      listes_matchs <- rbind(listes_matchs, loop.list)\n      nplayer <- nplayer +1\n    } \n  }\n  table.list <- table(listes_matchs$gameId)\n  table.list <- table.list[table.list %in% nplayer]\n  team.games <- unique(listes_matchs[,c(1,2,5,6)])\n  team.games <- team.games[team.games$gameId %in% names(table.list),]\n  return(team.games)\n  \n}\n\n\n#######################################################\n# team.matchsstats\n#####################################################\n# get all the stat of a list of games (for all players)\n# see Riot Api for more information\n# data.matchs.team : data.frame of a game id list (see team matchslist)\n# serveur : region\n# key : a Riot Api key\n########################################################\n\nteam.matchsstats <- function(data.matchs.team, serveur, key){\n  \n  # Init\n  vec.games.ids <- data.matchs.team$gameId\n  loop.tab <- data.frame()\n  \n  json.tab <- NULL\n  stat.tab <- NULL\n  stats.stat.tab <- NULL\n  \n  participants.tab <- NULL\n  player.partcipants.tab <- NULL\n  \n  loop.merge <- NULL\n  loop.tab<- NULL\n  \n  for(i in 1:length(vec.games.ids)){\n    id.loop <- vec.games.ids[i]\n    if(id.loop != 0 ){\n      json.tab <- lol.matches(id.loop, serveur, key)\n      \n      if(json.tab$gameDuration >= 300){\n        \n        stat.tab <- json.tab[[12]]\n        stats.stat.tab <- stat.tab$stats\n        stat.tab <- cbind(stat.tab[,c(\"participantId\", \"teamId\")],stats.stat.tab)\n        names(stat.tab)[1]<- \"partcipantId\"\n        \n        participants.tab <- json.tab[[\"participantIdentities\"]]\n        player.partcipants.tab <-participants.tab$player\n        participants.tab <- cbind(participants.tab[,1], player.partcipants.tab)\n        names(participants.tab)[1]<- names(stat.tab)[1]\n        \n        loop.merge <- merge(stat.tab, participants.tab)\n        \n        duration <- rep(json.tab$gameDuration, 10)\n        loop.merge<- cbind(loop.merge, duration)\n        \n        if((i!=1)&(length(names(loop.merge))!=length(names(loop.tab)))){\n          firstInhibitorAssist <- rep(NA, nrow(loop.merge))\n          firstInhibitorKill <- rep(NA, nrow(loop.merge))\n          loop.merge <- cbind(loop.merge, firstInhibitorKill)\n          names(loop.merge)[85]<- \"firstInhibitorKill\"\n          loop.merge <- cbind(loop.merge, firstInhibitorAssist)\n          names(loop.merge)[86]<- \"firstInhibitorAssist\"\n        }\n        \n        row.names(loop.merge) <- paste(id.loop, c(0:9), sep = \"\")\n        \n        loop.tab<- rbind(loop.tab,loop.merge)\n        \n        if(i%%8 == 0){\n          Sys.sleep(10) #Tant qu'on a pas une clef normale\n        }\n      }\n    } \n  }\n  return(loop.tab)\n}\n\n#######################################################\n# team.allstats\n#####################################################\n# get all the stat of a list of games (for all players)\n# see Riot Api for more information\n# vec.players : vector of player\n# serveur : region\n# key : a Riot Api key\n########################################################\n\nteam.allstats<- function(vec.players, serveur, key){\n  vec.id <- team.players(vec.players, serveur, key)\n  data.matchs.team <- team.matchslist(vec.players, vec.id, serveur, key)\n  data <- team.matchsstats(data.matchs.team, serveur, key)\n  result <- team.cleaner(data, vec.id)\n  return(result)\n}\n\n#######################################################\n# team.cleaner\n#####################################################\n# clean data of a team (keep only a few data)\n# data : data frame of a team\n########################################################\n\nteam.cleaner <- function(data,vec.id){\n  clean.column <- data[,c(\"teamId\",\"win\",\"kills\",\"deaths\",\"assists\",\"totalDamageDealt\",\"magicDamageDealt\",\n                          \"physicalDamageDealt\",\"trueDamageDealt\",\"totalDamageDealtToChampions\",\"magicDamageDealtToChampions\",\n                          \"physicalDamageDealtToChampions\",\"trueDamageDealtToChampions\",\"totalHeal\",\"totalUnitsHealed\",\n                          \"damageDealtToTurrets\",\"visionScore\",\"timeCCingOthers\",\"totalDamageTaken\",\"magicalDamageTaken\",\n                          \"trueDamageTaken\",\"goldEarned\",\"turretKills\",\"inhibitorKills\",\"totalMinionsKilled\",\n                          \"neutralMinionsKilled\",\"neutralMinionsKilledTeamJungle\",\"neutralMinionsKilledEnemyJungle\",\n                          \"totalTimeCrowdControlDealt\",\"visionWardsBoughtInGame\",\"sightWardsBoughtInGame\",\"wardsPlaced\",\n                          \"firstBloodKill\",\"firstBloodAssist\",\"firstTowerKill\",\"firstTowerAssist\",\"firstInhibitorKill\",\n                          \"firstInhibitorAssist\",\"accountId\",\"summonerName\",\"summonerId\",\"duration\" )]\n  clean.row <- clean.column[clean.column[,\"accountId\"] %in% vec.id,]\n  \n  return(clean.row)\n}",
    "created" : 1506698325847.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2950261663",
    "id" : "8ADA6C7D",
    "lastKnownWriteTime" : 1506753661,
    "last_content_update" : 1506753661512,
    "path" : "~/GitHub/Statlol/fonctions_team.R",
    "project_path" : "fonctions_team.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}