{
    "collab_server" : "",
    "contents" : "#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nsource(\"./fonctions_lol.R\", local = TRUE)\nsource(\"./fonctions_team.R\", local = TRUE)\nrequire(jsonlite)\nrequire(curl)\nrequire(httr)\nrequire(TriMatch)\nrequire(googleVis)\nlibrary(shiny)\nlibrary(DT)\n\n# Define UI for application that draws a histogram\nui <- navbarPage(\n   \n   # Application title\n   \"My LOL Team\",\n   \n   tabPanel(\"Information\",\n     sidebarLayout(\n     sidebarPanel(\n       textInput(\"apikey\", \"Riot Api key\",\"\"),\n       textInput(\"topname\", \"Top name\",\"RKSReidoz\"),\n       textInput(\"junname\", \"Jungler name\",\"Kazeel\"),\n       textInput(\"midname\", \"Mid name\",\"Mashu\"),\n       textInput(\"adcname\", \"Adc name\",\"Redwhale\"),\n       textInput(\"supname\", \"Sup name\",\"TheDeathcookie\"),\n       actionButton(\"analyze\", \"Analyze\")\n       \n       \n     ),\n     #################################################################################\n     # Show a plot of the generated distribution\n     mainPanel(tabsetPanel(\n       tabPanel(\"Plot\", htmlOutput(\"plotKDA\")),\n       tabPanel(\"Summary\", DT::dataTableOutput(\"meantable\")),\n       tabPanel(\"Data\", DT::dataTableOutput(\"fulltable\"))\n     )\n     \n     )\n   ))\n   # Sidebar with a slider input for number of bins \n   \n)\n\n################################################################################################################\n# SERVER\n#################################################################################################################\n\nserver <- function(input, output) {\n  \n  observeEvent(input$analyze, { #reaction to analyze button\n    \n    # Create a Progress object\n    progress <- shiny::Progress$new()\n    # Make sure it closes when we exit this reactive, even if there's an error\n    on.exit(progress$close())\n    #First Progress\n    progress$set(message = \"Fetch Data\", value = 1/3)\n    \n    #Generate data\n    data<-team.allstats(c(input$topname,input$junname,input$midname,input$adcname,input$supname),\"euw1\",input$apikey)\n    \n    # Last progress\n    progress$inc(1/4, detail = \"Render\")\n    \n    summary <- team.summary(data,\"mean\")\n    \n    \n    #Output table\n    output$fulltable = DT::renderDataTable({\n      data\n    }) # End table\n    \n    #Output table\n    output$meantable = DT::renderDataTable({\n      summary\n    }) # End table\n    \n    #Output Plot\n    output$plotKDA <- renderGvis({\n      gvisColumnChart(summary[,c(\"Group.1\",\"Kill\",\"Death\",\"Assist\")],options=list(width=670, height=600))\n    })#End Plot\n    \n  })## End ObserveEvent\n   \n  \n} # End Server\n\n############################################################################################################\n# RUN\n#############################################################################################################\n# Run the application \nshinyApp(ui = ui, server = server)\n\n",
    "created" : 1508678620709.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3393259131",
    "id" : "C0886AA3",
    "lastKnownWriteTime" : 1508786856,
    "last_content_update" : 1508786856298,
    "path" : "~/GitHub/Statlol/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}