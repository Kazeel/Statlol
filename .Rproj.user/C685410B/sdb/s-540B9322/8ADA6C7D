{
    "collab_server" : "",
    "contents" : "#############################################################################\n#Functions TEAM\n#############################################################################\n# You need this packages :\n\n# library(jsonlite)\n# library(curl)\n# library(httr)\n############################################################################\n# Functions using fonctions_lol.R \n#############################################################################\n# \n# \n# \n\n######################################################\n#team.players\n######################################################\n# get summoners account ids of a team of 5 players\n# Return a vector with ids\n# see Riot Api for more information\n# vec.players : vector of summoners name\n# serveur : region\n# key : a Riot Api key\n########################################################\n\nteam.players <- function(vec.players, serveur, key){\n  # vec.players : vector of summoners name\n  \n  # Init\n  len <- length(vec.players)\n  players.ids <- c()\n  for(i in 1:len){\n    # Return 0 if a player is missing\n    if(vec.players[i] != \"\" ){\n      players.ids[i]<-lol.player(pseudo = vec.players[i], serveur = serveur, key = key)[[\"accountId\"]]\n    } else{\n      players.ids[i] <- 0\n    }\n  }\n  return(players.ids)\n}\n\n#######################################################\n# team.matchslist\n#####################################################\n# get ranked matchslist of team\n# see Riot Api for more information\n# vec.players : vector of summonerName\n# players.id : vector of summoner account id\n# serveur : region\n# key : a Riot Api key\n########################################################\n\nteam.matchslist <- function(vec.players, players.id, serveur, key){\n  # \n  \n  # Init\n  len <- length(vec.players)\n  listes_matchs <- data.frame()\n  nplayer <- 0\n  for(i in 1:5){\n    # Si l'Id est 0 alors vous n'avez pas rentr? un pseudo\n    id.loop <- players.id[i]\n    pseudo.loop <- vec.players[i]\n    if(id.loop != 0 ){\n      loop.list <- lol.matchslist.r(id.loop, serveur, key)[[1]]\n      listes_matchs <- rbind(listes_matchs, loop.list)\n      nplayer <- nplayer +1\n    } \n  }\n  table.list <- table(listes_matchs$gameId)\n  table.list <- table.list[table.list %in% nplayer]\n  team.games <- unique(listes_matchs[,c(1,2,5,6)])\n  team.games <- team.games[team.games$gameId %in% names(table.list),]\n  return(team.games)\n  \n}\n\n\n#######################################################\n# team.matchsstats\n#####################################################\n# get all the stat of a list of games (for all players)\n# see Riot Api for more information\n# data.matchs.team : data.frame of a game id list (see team matchslist)\n# serveur : region\n# key : a Riot Api key\n########################################################\n\nteam.matchsstats <- function(data.matchs.team, serveur, key){\n  \n  # Init\n  vec.games.ids <- data.matchs.team$gameId\n  loop.tab <- data.frame()\n  \n  json.tab <- NULL\n  stat.tab <- NULL\n  stats.stat.tab <- NULL\n  \n  participants.tab <- NULL\n  player.partcipants.tab <- NULL\n  \n  loop.merge <- NULL\n  loop.tab<- NULL\n  \n  for(i in 1:length(vec.games.ids)){\n    id.loop <- vec.games.ids[i]\n    if(id.loop != 0 ){\n      json.tab <- lol.matches(id.loop, serveur, key)\n      \n      if(json.tab$gameDuration >= 300){#delete remake\n        \n        stat.tab <- json.tab[[12]]\n        stats.stat.tab <- stat.tab$stats\n        stat.tab <- cbind(stat.tab[,c(\"participantId\", \"teamId\")],stats.stat.tab)\n        names(stat.tab)[1]<- \"partcipantId\"\n        \n        participants.tab <- json.tab[[\"participantIdentities\"]]\n        player.partcipants.tab <-participants.tab$player\n        participants.tab <- cbind(participants.tab[,1], player.partcipants.tab)\n        names(participants.tab)[1]<- names(stat.tab)[1]\n        \n        loop.merge <- merge(stat.tab, participants.tab)\n        \n        duration <- rep(json.tab$gameDuration, 10)\n        loop.merge<- cbind(loop.merge, duration)\n        \n        if((i!=1)&(length(names(loop.merge))!=length(names(loop.tab)))){\n          firstInhibitorAssist <- rep(NA, nrow(loop.merge))\n          firstInhibitorKill <- rep(NA, nrow(loop.merge))\n          loop.merge <- cbind(loop.merge, firstInhibitorKill)\n          names(loop.merge)[85]<- \"firstInhibitorKill\"\n          loop.merge <- cbind(loop.merge, firstInhibitorAssist)\n          names(loop.merge)[86]<- \"firstInhibitorAssist\"\n        }\n        \n        row.names(loop.merge) <- paste(id.loop, c(0:9), sep = \"\")\n        \n        loop.tab<- rbind(loop.tab,loop.merge)\n        \n        if(i%%8 == 0){\n          Sys.sleep(10) #Tant qu'on a pas une clef normale\n        }\n      }\n    } \n  }\n  return(loop.tab)\n}\n\n#######################################################\n# team.allstats\n#####################################################\n# get all the stat of a list of games (for all players)\n# see Riot Api for more information\n# vec.players : vector of player\n# serveur : region\n# key : a Riot Api key\n########################################################\n\nteam.allstats<- function(vec.players, serveur, key){\n  vec.id <- team.players(vec.players, serveur, key)\n  data.matchs.team <- team.matchslist(vec.players, vec.id, serveur, key)\n  data <- team.matchsstats(data.matchs.team, serveur, key)\n  \n  #rename (maybe a player rename)\n  \n  for(i in 1:length(vec.id)){\n    data$summonerName[data$accountId == vec.id[i]]<-vec.players[i]\n  }\n  \n  result <- team.cleaner(data, vec.id)\n  return(result)\n}\n\n#######################################################\n# team.cleaner\n#####################################################\n# clean data of a team (keep only a few data)\n# data : data frame of a team\n########################################################\n\nteam.cleaner <- function(data,vec.id){\n  \n  matchinfo <- data[data[,\"accountId\"] %in% vec.id,] #Filter : players of the team\n  \n  clean.column<-data.frame(\n    #######################################\n    # player\n    Id=row.names(matchinfo),\n    Name=matchinfo$summonerName,\n    Id_Sum=matchinfo$summonerId,\n    Id_Ac=matchinfo$accountId,\n    \n    #######################################\n    # Stat player\n    Kill=matchinfo$kills,\n    Death=matchinfo$deaths,\n    Assist=matchinfo$assists,\n    \n    T_Damage_D=matchinfo$totalDamageDealt,\n    Damage_D=matchinfo$totalDamageDealtToChampions,\n    Damage_Turret=matchinfo$damageDealtToTurrets,\n    Turret=matchinfo$turretKills,\n    Inhib=matchinfo$inhibitorKills,\n    \n    Heal=matchinfo$totalHeal,\n    Heal_N=matchinfo$totalUnitsHealed,\n    \n    Score_Vision=matchinfo$visionScore,\n    vison_ward=matchinfo$visionWardsBoughtInGame,\n    ward=matchinfo$wardsPlaced,\n    \n    Damage_T=matchinfo$totalDamageTaken,\n    CC_score=matchinfo$timeCCingOthers,\n    CC_time=matchinfo$totalTimeCrowdControlDealt,\n    \n    Gold_E=matchinfo$goldEarned,\n    Minions=matchinfo$totalMinionsKilled,\n    Minionsbis=matchinfo$neutralMinionsKilled,\n    \n    F_Blood=matchinfo$firstBloodKill,\n    F_Tower=matchinfo$firstTowerKill,\n    ######################################\n    # team\n    Blue_Side=matchinfo$teamId,\n    Win=matchinfo$win,\n    Duree=matchinfo$duration,\n    Id_game=substr(row.names(matchinfo),1,10))\n  \n  ############################################\n  # Convertion\n  \n  clean.column$Id_game<-as.factor(clean.column$Id_game)\n  clean.column$Blue_Side[clean.column$Blue_Side == 100]<-TRUE\n  clean.column$Blue_Side[clean.column$Blue_Side == 200]<-FALSE\n\n  return(clean.column)\n}\n\n#######################################################\n# team.summary\n#######################################################\n# Give some (calculate) stat of the team (winrate etc...)\n# data : a clean data of a team (use team.cleaner)\n#######################################################\n\nteam.summary <-function(data,func){\n  \n  filter.data <- data[,c(\"Kill\",\n                         \"Death\",\n                         \"Assist\",\n                         \"T_Damage_D\",\n                         \"Damage_D\",\n                         \"Damage_Turret\",\n                         \"Turret\",\n                         \"Inhib\",\n                         \"Heal\",\n                         \"Heal_N\",\n                         \"Score_Vision\",\n                         \"vison_ward\",\n                         \"ward\",\n                         \"Damage_T\",\n                         \"CC_score\",\n                         \"CC_time\",\n                         \"Gold_E\",\n                         \"Minions\",\n                         \"Minionsbis\",\n                         \"F_Blood\",\n                         \"F_Tower\",\n                         \"Blue_Side\",\n                         \"Win\",\n                         \"Duree\"\n                         )]\n  result<-aggregate(filter.data,by=list(data$Name), FUN = func)\n  \n  return(result)\n}\n\n#######################################################\n# team.normalize\n#######################################################\n# Give some (calculate) stat of the team (winrate etc...)\n# data : a clean data of a team (use team.cleaner)\n#######################################################\n\nteam.normalize <-function(data){\n  \n  normalize.data <- data[,c(\"T_Damage_D\",\n                         \"Damage_D\",\n                         \"Damage_Turret\",\n                         \"Heal\",\n                         \"Score_Vision\",\n                         \"vison_ward\",\n                         \"ward\",\n                         \"Damage_T\",\n                         \"CC_score\",\n                         \"CC_time\",\n                         \"Gold_E\",\n                         \"Minions\",\n                         \"Minionsbis\")]/data$Duree\n  result<- cbind(data[,c(\"Kill\",\n                              \"Death\",\n                              \"Assist\",\n                              \"Turret\",\n                              \"Inhib\",\n                              \"Heal_N\",\n                              \"F_Blood\",\n                              \"F_Tower\",\n                              \"Blue_Side\",\n                              \"Win\",\n                              \"Duree\"\n  )],normalize.data)\n  \n  return(result)\n}\n\n#######################################################\n# team.kda\n#######################################################\n# Give some (calculate) stat of the team (winrate etc...)\n# data : a clean data of a team (use team.cleaner)\n#######################################################\n\nteam.kda <-function(data,filtre=\"none\",onenumbers=\"no\"){\n  #filtre not allowed with onenumbers\n  \n  if(onenumbers==\"yes\"){\n    death <- data$Death\n    death[death == 0]<-1\n    data.use<-data.frame((KDA = data$Kill+data$Assist)/death)\n    names(data.use)<-c(\"KDA\")\n  }\n  \n  if(onenumbers==\"no\"){\n    data.use<-data[,c(\"Kill\",\"Death\",\"Assist\")]\n  }\n  \n  if(filtre==\"none\"){\n    list.filtre<-list(data$Name)\n    result<-aggregate(data.use, by=list.filtre, FUN=mean)\n    names(result)[1]<-c(\"Players\")\n  }\n  \n  if(filtre==\"side\"|filtre==\"win\"){\n    \n    if(filtre==\"side\"){\n      list.elem<-c(\"Blue\",\"Red\")\n      Blue_Side <- data$Blue_Side\n      Blue_Side[Blue_Side == 1] <- list.elem[1]\n      Blue_Side[Blue_Side == 0] <- list.elem[2]\n      list.filtre<-list(data$Name, Blue_Side)\n    }\n    \n    if(filtre==\"win\"){\n      list.elem<-c(\"Win\",\"Loose\")\n      Win <- data$Win\n      Win[Win == TRUE] <- list.elem[1]\n      Win[Win == FALSE] <- list.elem[2]\n      list.filtre<-list(data$Name, Win)\n    }\n    \n    aggreg<-aggregate(data.use, by=list.filtre, FUN=mean)\n    result<- merge(aggreg[aggreg$Group.2==list.elem[1],-2],aggreg[aggreg$Group.2==list.elem[2],-2], by=\"Group.1\")\n    \n    if(onenumbers==\"no\"){\n      names(result)<-c(\"Players\",\n                       paste(\"Kill when\",list.elem[1]),\n                       paste(\"Death when\",list.elem[1]),\n                       paste(\"Assist when\",list.elem[1]),\n                       paste(\"Kill when\",list.elem[2]),\n                       paste(\"Death when\",list.elem[2]),\n                       paste(\"Assist when\",list.elem[2]))\n    }\n    \n    if(onenumbers==\"yes\"){\n      names(result)<-c(\"Players\",\n                       paste(\"KDA when\",list.elem[1]),\n                       paste(\"KDA when\",list.elem[2]))\n    }\n  }\n  \n  return(result)\n}\n\n#######################################################\n# team.winrate\n#######################################################\n# Give some (calculate) stat of the team (winrate etc...)\n# data : a clean data of a team (use team.cleaner)\n#######################################################\n\nteam.winrate <-function(data,filtre=\"none\"){\n  \n  if(filtre == \"side\"){\n    Blue_Side <- data$Blue_Side\n    Blue_Side[Blue_Side == 1] <- \"Blue\"\n    Blue_Side[Blue_Side == 0] <- \"Red\"\n    winrate <- t(aggregate(data$Win,by=list(Blue_Side), FUN = mean))\n    resultat <- data.frame(Win = c(\"Win\",\"Loose\"),\n                           Col1 = c(as.numeric(winrate[2,1]),1-as.numeric(winrate[2,1])),\n                           Col2 = c(as.numeric(winrate[2,2]),1-as.numeric(winrate[2,2])))\n    names(resultat) <- c(\"Win\", winrate[1,1], winrate[1,2])\n  }\n  if(filtre == \"none\"){\n    winrate <- mean(data$Win)\n    vector <- c(winrate, 1-winrate)\n    resultat <- data.frame(Win = c(\"Win\",\"Loose\"), Winrate = vector)\n    \n  }\n  \n  return(resultat)\n}\n#######################################################\n# team.farm\n#######################################################\n# Give some (calculate) stat of the team (winrate etc...)\n# data : a clean data of a team (use team.cleaner)\n#######################################################\n\nteam.farm <-function(data,filtre=\"none\"){\n  \n  if(filtre == \"win\"){\n    Win <- data$Win\n    farm.min <- 60*(data$Minions+data$Minionsbis)/data$Duree\n    farm.side<-aggregate(farm.min,by=list(data$Name,Win), FUN = mean)\n    resultat<-merge(farm.side[farm.side$Group.2==TRUE,c(\"Group.1\",\"x\")],farm.side[farm.side$Group.2==FALSE,c(\"Group.1\",\"x\")], by=\"Group.1\")\n    names(resultat) <- c(\"Players\", \"Minions/min when Win\", \"Minions/min when loose\")\n  }\n  if(filtre == \"none\"){\n    farm.min <- 60*(data$Minions+data$Minionsbis)/data$Duree\n    resultat<-aggregate(farm.min,by=list(data$Name), FUN = mean)\n    names(resultat)<- c(\"Players\",\"Minions/min\")\n  }\n  \n  return(resultat)\n}\n",
    "created" : 1506698325847.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "978951564",
    "id" : "8ADA6C7D",
    "lastKnownWriteTime" : 1508919625,
    "last_content_update" : 1508919625749,
    "path" : "~/GitHub/Statlol/fonctions_team.R",
    "project_path" : "fonctions_team.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}