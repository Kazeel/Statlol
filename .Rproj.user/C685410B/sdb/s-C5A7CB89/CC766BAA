{
    "collab_server" : "",
    "contents" : "# serveur : region\n# key : a Riot Api key\n########################################################\nlol.matches <- function(game.id, serveur, key){\nfichier.json<-paste(\"https://\",serveur,\".api.riotgames.com/lol/match/v3/matches/\",game.id,\"?api_key=\",key,sep=\"\")\nliste<- fromJSON(fichier.json)\nreturn(liste)\n}\n#############################################################\nfor(i in 1:len){\n# Return 0 if a player is missing\nif(vec.players[i] != \"\" ){\nplayers.ids[i]<-lol.player(pseudo = vec.players[i], serveur = serveur, key = key)[[\"accountId\"]]\n} else{\nplayers.ids[i] <- 0\n}\n}\ni\nlol.player <- function(pseudo, serveur, key){\nfichier.json<-paste(\"https://\",serveur,\".api.riotgames.com/lol/summoner/v3/summoners/by-name/\",pseudo,\"?api_key=\",key,sep=\"\")\nliste<- fromJSON(fichier.json)\nreturn(liste)\n}\nfichier.json<-paste(\"https://\",serveur,\".api.riotgames.com/lol/summoner/v3/summoners/by-name/\",pseudo,\"?api_key=\",key,sep=\"\")\nliste<- fromJSON(fichier.json)\nfichier.json\nkey    <- \"RGAPI-d64fc2d0-e746-4457-92fe-f707bc02bc36\"\nteam.allstats<- function(vec.players, serveur, key){\nvec.id <- team.players(vec.players, serveur, key)\ndata.matchs.team <- team.matchslist(vec.players, vec.id, serveur, key)\nresult <- team.matchsstats(data.matchs.team, serveur, key)\nreturn(result)\n}\ndata <- team.allstats(pseudos_joueurs, serveur, key)\n#############################################################################\n#Functions TEAM\n#############################################################################\n# You need this packages :\n# library(jsonlite)\n# library(curl)\n# library(httr)\n############################################################################\n# Functions using fonctions_lol.R\n#############################################################################\n#\n#\n#\n######################################################\n#team.players\n######################################################\n# get summoners account ids of a team of 5 players\n# Return a vector with ids\n# see Riot Api for more information\n# vec.players : vector of summoners name\n# serveur : region\n# key : a Riot Api key\n########################################################\nteam.players <- function(vec.players, serveur, key){\n# vec.players : vector of summoners name\n# Init\nlen <- length(vec.players)\nplayers.ids <- c()\nfor(i in 1:len){\n# Return 0 if a player is missing\nif(vec.players[i] != \"\" ){\nplayers.ids[i]<-lol.player(pseudo = vec.players[i], serveur = serveur, key = key)[[\"accountId\"]]\n} else{\nplayers.ids[i] <- 0\n}\n}\nreturn(players.ids)\n}\n#######################################################\n# team.matchslist\n#####################################################\n# get ranked matchslist of team\n# see Riot Api for more information\n# vec.players : vector of summonerName\n# players.id : vector of summoner account id\n# serveur : region\n# key : a Riot Api key\n########################################################\nteam.matchslist <- function(vec.players, players.id, serveur, key){\n#\n# Init\nlen <- length(vec.players)\nlistes_matchs <- data.frame()\nnplayer <- 0\nfor(i in 1:5){\n# Si l'Id est 0 alors vous n'avez pas rentr? un pseudo\nid.loop <- players.id[i]\npseudo.loop <- vec.players[i]\nif(id.loop != 0 ){\nloop.list <- lol.matchslist.r(id.loop, serveur, key)[[1]]\nlistes_matchs <- rbind(listes_matchs, loop.list)\nnplayer <- nplayer +1\n}\n}\ntable.list <- table(listes_matchs$gameId)\ntable.list <- table.list[table.list %in% nplayer]\nteam.games <- unique(listes_matchs[,c(1,2,5,6)])\nteam.games <- team.games[team.games$gameId %in% names(table.list),]\nreturn(team.games)\n}\n#######################################################\n# team.matchsstats\n#####################################################\n# get all the stat of a list of games (for all players)\n# see Riot Api for more information\n# data.matchs.team : data.frame of a game id list (see team matchslist)\n# serveur : region\n# key : a Riot Api key\n########################################################\nteam.matchsstats <- function(data.matchs.team, serveur, key){\n# Init\nvec.games.ids <- data.matchs.team$gameId\nloop.tab <- data.frame()\njson.tab <- NULL\nstat.tab <- NULL\nstats.stat.tab <- NULL\nparticipants.tab <- NULL\nplayer.partcipants.tab <- NULL\nloop.merge <- NULL\nloop.tab<- NULL\nfor(i in 1:length(vec.games.ids)){\nid.loop <- vec.games.ids[i]\nif(id.loop != 0 ){\njson.tab <- lol.matches(id.loop, serveur, key)\nif(json.tab$gameDuration >= 300){\nstat.tab <- json.tab[[12]]\nstats.stat.tab <- stat.tab$stats\nstat.tab <- cbind(stat.tab[,c(\"participantId\", \"teamId\")],stats.stat.tab)\nnames(stat.tab)[1]<- \"partcipantId\"\nparticipants.tab <- json.tab[[\"participantIdentities\"]]\nplayer.partcipants.tab <-participants.tab$player\nparticipants.tab <- cbind(participants.tab[,1], player.partcipants.tab)\nnames(participants.tab)[1]<- names(stat.tab)[1]\nloop.merge <- merge(stat.tab, participants.tab)\nduration <- rep(json.tab$gameDuration, 10)\nloop.merge<- cbind(loop.merge, duration)\nif((i!=1)&(length(names(loop.merge))!=length(names(loop.tab)))){\nfirstInhibitorAssist <- rep(NA, nrow(loop.merge))\nfirstInhibitorKill <- rep(NA, nrow(loop.merge))\nloop.merge <- cbind(loop.merge, firstInhibitorKill)\nnames(loop.merge)[85]<- \"firstInhibitorKill\"\nloop.merge <- cbind(loop.merge, firstInhibitorAssist)\nnames(loop.merge)[86]<- \"firstInhibitorAssist\"\n}\nrow.names(loop.merge) <- paste(id.loop, c(0:9), sep = \"\")\nloop.tab<- rbind(loop.tab,loop.merge)\nif(i%%8 == 0){\nSys.sleep(10) #Tant qu'on a pas une clef normale\n}\n}\n}\n}\nreturn(loop.tab)\n}\n#######################################################\n# team.allstats\n#####################################################\n# get all the stat of a list of games (for all players)\n# see Riot Api for more information\n# data.matchs.team : data.frame of a game id list (see team matchslist)\n# serveur : region\n# key : a Riot Api key\n########################################################\nteam.allstats<- function(vec.players, serveur, key){\nvec.id <- team.players(vec.players, serveur, key)\ndata.matchs.team <- team.matchslist(vec.players, vec.id, serveur, key)\nresult <- team.matchsstats(data.matchs.team, serveur, key)\nreturn(result)\n}\ndata <- team.allstats(pseudos_joueurs, serveur, key)\nView(data)\nnames(data)\ndata[,1]\nclean.column <- data[,c(\"teamId\",\"win\",\"kills\",\"deaths\",\"assists\",\"totalDamageDealt\",\"magicDamageDealt\",\n\"physicalDamageDealt\",\"trueDamageDealt\",\"totalDamageDealtToChampions\",\"magicDamageDealtToChampions\",\n\"physicalDamageDealtToChampions\",\"trueDamageDealtToChampions\",\"totalHeal\",\"totalUnitsHealed\",\n\"damageDealtToTurrets\",\"visionScore\",\"timeCCingOthers\",\"totalDamageTaken\",\"magicalDamageTaken\",\n\"trueDamageTaken\",\"goldEarned\",\"turretKills\",\"inhibitorKills\",\"totalMinionsKilled\",\n\"neutralMinionsKilled\",\"neutralMinionsKilledTeamJungle\",\"neutralMinionsKilledEnemyJungle\",\n\"totalTimeCrowdControlDealt\",\"visionWardsBoughtInGame\",\"sightWardsBoughtInGame\",\"wardsPlaced\",\n\"firstBloodKill\",\"firstBloodAssist\",\"firstTowerKill\",\"firstTowerAssist\",\"firstInhibitorKill\",\n\"firstInhibitorAssist\",\"accountId\",\"summonerName\",\"summonerId\",\"duration\" )]\nclean.column[clean.column[,\"accountId\"] %in% idsjoueurs,]\nclean.column[clean.column[,\"accountId\"] %in% ids_joueurs,]\n#############################################################################\n#Functions TEAM\n#############################################################################\n# You need this packages :\n# library(jsonlite)\n# library(curl)\n# library(httr)\n############################################################################\n# Functions using fonctions_lol.R\n#############################################################################\n#\n#\n#\n######################################################\n#team.players\n######################################################\n# get summoners account ids of a team of 5 players\n# Return a vector with ids\n# see Riot Api for more information\n# vec.players : vector of summoners name\n# serveur : region\n# key : a Riot Api key\n########################################################\nteam.players <- function(vec.players, serveur, key){\n# vec.players : vector of summoners name\n# Init\nlen <- length(vec.players)\nplayers.ids <- c()\nfor(i in 1:len){\n# Return 0 if a player is missing\nif(vec.players[i] != \"\" ){\nplayers.ids[i]<-lol.player(pseudo = vec.players[i], serveur = serveur, key = key)[[\"accountId\"]]\n} else{\nplayers.ids[i] <- 0\n}\n}\nreturn(players.ids)\n}\n#######################################################\n# team.matchslist\n#####################################################\n# get ranked matchslist of team\n# see Riot Api for more information\n# vec.players : vector of summonerName\n# players.id : vector of summoner account id\n# serveur : region\n# key : a Riot Api key\n########################################################\nteam.matchslist <- function(vec.players, players.id, serveur, key){\n#\n# Init\nlen <- length(vec.players)\nlistes_matchs <- data.frame()\nnplayer <- 0\nfor(i in 1:5){\n# Si l'Id est 0 alors vous n'avez pas rentr? un pseudo\nid.loop <- players.id[i]\npseudo.loop <- vec.players[i]\nif(id.loop != 0 ){\nloop.list <- lol.matchslist.r(id.loop, serveur, key)[[1]]\nlistes_matchs <- rbind(listes_matchs, loop.list)\nnplayer <- nplayer +1\n}\n}\ntable.list <- table(listes_matchs$gameId)\ntable.list <- table.list[table.list %in% nplayer]\nteam.games <- unique(listes_matchs[,c(1,2,5,6)])\nteam.games <- team.games[team.games$gameId %in% names(table.list),]\nreturn(team.games)\n}\n#######################################################\n# team.matchsstats\n#####################################################\n# get all the stat of a list of games (for all players)\n# see Riot Api for more information\n# data.matchs.team : data.frame of a game id list (see team matchslist)\n# serveur : region\n# key : a Riot Api key\n########################################################\nteam.matchsstats <- function(data.matchs.team, serveur, key){\n# Init\nvec.games.ids <- data.matchs.team$gameId\nloop.tab <- data.frame()\njson.tab <- NULL\nstat.tab <- NULL\nstats.stat.tab <- NULL\nparticipants.tab <- NULL\nplayer.partcipants.tab <- NULL\nloop.merge <- NULL\nloop.tab<- NULL\nfor(i in 1:length(vec.games.ids)){\nid.loop <- vec.games.ids[i]\nif(id.loop != 0 ){\njson.tab <- lol.matches(id.loop, serveur, key)\nif(json.tab$gameDuration >= 300){\nstat.tab <- json.tab[[12]]\nstats.stat.tab <- stat.tab$stats\nstat.tab <- cbind(stat.tab[,c(\"participantId\", \"teamId\")],stats.stat.tab)\nnames(stat.tab)[1]<- \"partcipantId\"\nparticipants.tab <- json.tab[[\"participantIdentities\"]]\nplayer.partcipants.tab <-participants.tab$player\nparticipants.tab <- cbind(participants.tab[,1], player.partcipants.tab)\nnames(participants.tab)[1]<- names(stat.tab)[1]\nloop.merge <- merge(stat.tab, participants.tab)\nduration <- rep(json.tab$gameDuration, 10)\nloop.merge<- cbind(loop.merge, duration)\nif((i!=1)&(length(names(loop.merge))!=length(names(loop.tab)))){\nfirstInhibitorAssist <- rep(NA, nrow(loop.merge))\nfirstInhibitorKill <- rep(NA, nrow(loop.merge))\nloop.merge <- cbind(loop.merge, firstInhibitorKill)\nnames(loop.merge)[85]<- \"firstInhibitorKill\"\nloop.merge <- cbind(loop.merge, firstInhibitorAssist)\nnames(loop.merge)[86]<- \"firstInhibitorAssist\"\n}\nrow.names(loop.merge) <- paste(id.loop, c(0:9), sep = \"\")\nloop.tab<- rbind(loop.tab,loop.merge)\nif(i%%8 == 0){\nSys.sleep(10) #Tant qu'on a pas une clef normale\n}\n}\n}\n}\nreturn(loop.tab)\n}\n#######################################################\n# team.allstats\n#####################################################\n# get all the stat of a list of games (for all players)\n# see Riot Api for more information\n# vec.players : vector of player\n# serveur : region\n# key : a Riot Api key\n########################################################\nteam.allstats<- function(vec.players, serveur, key){\nvec.id <- team.players(vec.players, serveur, key)\ndata.matchs.team <- team.matchslist(vec.players, vec.id, serveur, key)\ndata <- team.matchsstats(data.matchs.team, serveur, key)\nresult <- team.cleaner(data, vec.id)\nreturn(result)\n}\n#######################################################\n# team.cleaner\n#####################################################\n# clean data of a team (keep only a few data)\n# data : data frame of a team\n########################################################\nteam.cleaner <- function(data,vec.id){\nclean.column <- data[,c(\"teamId\",\"win\",\"kills\",\"deaths\",\"assists\",\"totalDamageDealt\",\"magicDamageDealt\",\n\"physicalDamageDealt\",\"trueDamageDealt\",\"totalDamageDealtToChampions\",\"magicDamageDealtToChampions\",\n\"physicalDamageDealtToChampions\",\"trueDamageDealtToChampions\",\"totalHeal\",\"totalUnitsHealed\",\n\"damageDealtToTurrets\",\"visionScore\",\"timeCCingOthers\",\"totalDamageTaken\",\"magicalDamageTaken\",\n\"trueDamageTaken\",\"goldEarned\",\"turretKills\",\"inhibitorKills\",\"totalMinionsKilled\",\n\"neutralMinionsKilled\",\"neutralMinionsKilledTeamJungle\",\"neutralMinionsKilledEnemyJungle\",\n\"totalTimeCrowdControlDealt\",\"visionWardsBoughtInGame\",\"sightWardsBoughtInGame\",\"wardsPlaced\",\n\"firstBloodKill\",\"firstBloodAssist\",\"firstTowerKill\",\"firstTowerAssist\",\"firstInhibitorKill\",\n\"firstInhibitorAssist\",\"accountId\",\"summonerName\",\"summonerId\",\"duration\" )]\nclean.row <- clean.column[clean.column[,\"accountId\"] %in% vec.id,]\nreturn(result)\n}\ndata <- team.allstats(pseudos_joueurs, serveur, key)\n#############################################################################\n#Functions TEAM\n#############################################################################\n# You need this packages :\n# library(jsonlite)\n# library(curl)\n# library(httr)\n############################################################################\n# Functions using fonctions_lol.R\n#############################################################################\n#\n#\n#\n######################################################\n#team.players\n######################################################\n# get summoners account ids of a team of 5 players\n# Return a vector with ids\n# see Riot Api for more information\n# vec.players : vector of summoners name\n# serveur : region\n# key : a Riot Api key\n########################################################\nteam.players <- function(vec.players, serveur, key){\n# vec.players : vector of summoners name\n# Init\nlen <- length(vec.players)\nplayers.ids <- c()\nfor(i in 1:len){\n# Return 0 if a player is missing\nif(vec.players[i] != \"\" ){\nplayers.ids[i]<-lol.player(pseudo = vec.players[i], serveur = serveur, key = key)[[\"accountId\"]]\n} else{\nplayers.ids[i] <- 0\n}\n}\nreturn(players.ids)\n}\n#######################################################\n# team.matchslist\n#####################################################\n# get ranked matchslist of team\n# see Riot Api for more information\n# vec.players : vector of summonerName\n# players.id : vector of summoner account id\n# serveur : region\n# key : a Riot Api key\n########################################################\nteam.matchslist <- function(vec.players, players.id, serveur, key){\n#\n# Init\nlen <- length(vec.players)\nlistes_matchs <- data.frame()\nnplayer <- 0\nfor(i in 1:5){\n# Si l'Id est 0 alors vous n'avez pas rentr? un pseudo\nid.loop <- players.id[i]\npseudo.loop <- vec.players[i]\nif(id.loop != 0 ){\nloop.list <- lol.matchslist.r(id.loop, serveur, key)[[1]]\nlistes_matchs <- rbind(listes_matchs, loop.list)\nnplayer <- nplayer +1\n}\n}\ntable.list <- table(listes_matchs$gameId)\ntable.list <- table.list[table.list %in% nplayer]\nteam.games <- unique(listes_matchs[,c(1,2,5,6)])\nteam.games <- team.games[team.games$gameId %in% names(table.list),]\nreturn(team.games)\n}\n#######################################################\n# team.matchsstats\n#####################################################\n# get all the stat of a list of games (for all players)\n# see Riot Api for more information\n# data.matchs.team : data.frame of a game id list (see team matchslist)\n# serveur : region\n# key : a Riot Api key\n########################################################\nteam.matchsstats <- function(data.matchs.team, serveur, key){\n# Init\nvec.games.ids <- data.matchs.team$gameId\nloop.tab <- data.frame()\njson.tab <- NULL\nstat.tab <- NULL\nstats.stat.tab <- NULL\nparticipants.tab <- NULL\nplayer.partcipants.tab <- NULL\nloop.merge <- NULL\nloop.tab<- NULL\nfor(i in 1:length(vec.games.ids)){\nid.loop <- vec.games.ids[i]\nif(id.loop != 0 ){\njson.tab <- lol.matches(id.loop, serveur, key)\nif(json.tab$gameDuration >= 300){\nstat.tab <- json.tab[[12]]\nstats.stat.tab <- stat.tab$stats\nstat.tab <- cbind(stat.tab[,c(\"participantId\", \"teamId\")],stats.stat.tab)\nnames(stat.tab)[1]<- \"partcipantId\"\nparticipants.tab <- json.tab[[\"participantIdentities\"]]\nplayer.partcipants.tab <-participants.tab$player\nparticipants.tab <- cbind(participants.tab[,1], player.partcipants.tab)\nnames(participants.tab)[1]<- names(stat.tab)[1]\nloop.merge <- merge(stat.tab, participants.tab)\nduration <- rep(json.tab$gameDuration, 10)\nloop.merge<- cbind(loop.merge, duration)\nif((i!=1)&(length(names(loop.merge))!=length(names(loop.tab)))){\nfirstInhibitorAssist <- rep(NA, nrow(loop.merge))\nfirstInhibitorKill <- rep(NA, nrow(loop.merge))\nloop.merge <- cbind(loop.merge, firstInhibitorKill)\nnames(loop.merge)[85]<- \"firstInhibitorKill\"\nloop.merge <- cbind(loop.merge, firstInhibitorAssist)\nnames(loop.merge)[86]<- \"firstInhibitorAssist\"\n}\nrow.names(loop.merge) <- paste(id.loop, c(0:9), sep = \"\")\nloop.tab<- rbind(loop.tab,loop.merge)\nif(i%%8 == 0){\nSys.sleep(10) #Tant qu'on a pas une clef normale\n}\n}\n}\n}\nreturn(loop.tab)\n}\n#######################################################\n# team.allstats\n#####################################################\n# get all the stat of a list of games (for all players)\n# see Riot Api for more information\n# vec.players : vector of player\n# serveur : region\n# key : a Riot Api key\n########################################################\nteam.allstats<- function(vec.players, serveur, key){\nvec.id <- team.players(vec.players, serveur, key)\ndata.matchs.team <- team.matchslist(vec.players, vec.id, serveur, key)\ndata <- team.matchsstats(data.matchs.team, serveur, key)\nresult <- team.cleaner(data, vec.id)\nreturn(result)\n}\n#######################################################\n# team.cleaner\n#####################################################\n# clean data of a team (keep only a few data)\n# data : data frame of a team\n########################################################\nteam.cleaner <- function(data,vec.id){\nclean.column <- data[,c(\"teamId\",\"win\",\"kills\",\"deaths\",\"assists\",\"totalDamageDealt\",\"magicDamageDealt\",\n\"physicalDamageDealt\",\"trueDamageDealt\",\"totalDamageDealtToChampions\",\"magicDamageDealtToChampions\",\n\"physicalDamageDealtToChampions\",\"trueDamageDealtToChampions\",\"totalHeal\",\"totalUnitsHealed\",\n\"damageDealtToTurrets\",\"visionScore\",\"timeCCingOthers\",\"totalDamageTaken\",\"magicalDamageTaken\",\n\"trueDamageTaken\",\"goldEarned\",\"turretKills\",\"inhibitorKills\",\"totalMinionsKilled\",\n\"neutralMinionsKilled\",\"neutralMinionsKilledTeamJungle\",\"neutralMinionsKilledEnemyJungle\",\n\"totalTimeCrowdControlDealt\",\"visionWardsBoughtInGame\",\"sightWardsBoughtInGame\",\"wardsPlaced\",\n\"firstBloodKill\",\"firstBloodAssist\",\"firstTowerKill\",\"firstTowerAssist\",\"firstInhibitorKill\",\n\"firstInhibitorAssist\",\"accountId\",\"summonerName\",\"summonerId\",\"duration\" )]\nclean.row <- clean.column[clean.column[,\"accountId\"] %in% vec.id,]\nreturn(clean.row)\n}\ndata <- team.allstats(pseudos_joueurs, serveur, key)\nView(data)\nrunApp('lol_team')\ninstall.packages(\"DT\")\nrunApp('lol_team')\n",
    "created" : 1508678091754.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4250058805",
    "id" : "CC766BAA",
    "lastKnownWriteTime" : 1506763412,
    "last_content_update" : 1506763412,
    "path" : "~/GitHub/Statlol/.Rhistory",
    "project_path" : ".Rhistory",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_history"
}